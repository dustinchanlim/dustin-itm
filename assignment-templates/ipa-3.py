{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7df6cdaf-8652-4f9a-b4c5-3247e80a73b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Individual Programming Assignment 3\n",
    "\n",
    "70 points\n",
    "\n",
    "This assignment will develop your ability to manipulate data.\n",
    "'''\n",
    "\n",
    "def relationship_status(from_member, to_member, social_graph):\n",
    "    '''Relationship Status.\n",
    "    20 points.\n",
    "\n",
    "    Let us pretend that you are building a new app.\n",
    "    Your app supports social media functionality, which means that users can have\n",
    "    relationships with other users.\n",
    "\n",
    "    There are two guidelines for describing relationships on this social media app:\n",
    "    1. Any user can follow any other user.\n",
    "    2. If two users follow each other, they are considered friends.\n",
    "\n",
    "    This function describes the relationship that two users have with each other.\n",
    "\n",
    "    Please see \"assignment-4-sample-data.py\" for sample data. The social graph\n",
    "    will adhere to the same pattern.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    from_member: str\n",
    "        the subject member\n",
    "    to_member: str\n",
    "        the object member\n",
    "    social_graph: dict\n",
    "        the relationship data\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        \"follower\" if fromMember follows toMember,\n",
    "        \"followed by\" if fromMember is followed by toMember,\n",
    "        \"friends\" if fromMember and toMember follow each other,\n",
    "        \"no relationship\" if neither fromMember nor toMember follow each other.\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    if from_member in social_graph and to_member in social_graph[from_member]['following']:\n",
    "        if to_member in social_graph and from_member in social_graph[to_member]['following']:\n",
    "            return(\"friends\")\n",
    "        else:\n",
    "            return (\"follower\")\n",
    "    elif to_member in social_graph and from_member in social_graph[to_member]['following']:\n",
    "        return (\"followed by\")\n",
    "    else:\n",
    "        return (\"no relationship\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "799fa8f6-5c20-4c72-898c-bdf522e4879f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tic_tac_toe(board):\n",
    "    '''Tic Tac Toe.\n",
    "    25 points.\n",
    "\n",
    "    Tic Tac Toe is a common paper-and-pencil game.\n",
    "    Players must attempt to successfully draw a straight line of their symbol across a grid.\n",
    "    The player that does this first is considered the winner.\n",
    "\n",
    "    This function evaluates a tic tac toe board and returns the winner.\n",
    "\n",
    "    Please see \"assignment-4-sample-data.py\" for sample data. The board will adhere\n",
    "    to the same pattern. The board may by 3x3, 4x4, 5x5, or 6x6. The board will never\n",
    "    have more than one winner. The board will only ever have 2 unique symbols at the same time.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    board: list\n",
    "        the representation of the tic-tac-toe board as a square list of lists\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the symbol of the winner or \"NO WINNER\" if there is no winner\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    for i in range(0,len(board)):\n",
    "        if all(cell==board[i][0] for cell in board[i]):\n",
    "            return (board[i][0])\n",
    "        elif all(cell==board[0][0] for cell in [board[j][j] for j in range(len(board))]):\n",
    "            return board[0][0]\n",
    "        elif all(cell==board[len(board)-1][0] for cell in [board[len(board)-1-j][j]for j in range(len(board))]):\n",
    "            return board[len(board)-1][0]\n",
    "        elif all(cell==board[0][i] for cell in [board[j][i] for j in range(len(board))]):\n",
    "            return board[0][i]\n",
    "        \n",
    "    return (\"NO WINNER\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "01f45dd3-348c-413b-877a-0143d11b5174",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eta(first_stop, second_stop, route_map):\n",
    "    '''ETA.\n",
    "    25 points.\n",
    "\n",
    "    A shuttle van service is tasked to travel along a predefined circlar route.\n",
    "    This route is divided into several legs between stops.\n",
    "    The route is one-way only, and it is fully connected to itself.\n",
    "\n",
    "    This function returns how long it will take the shuttle to arrive at a stop\n",
    "    after leaving another stop.\n",
    "\n",
    "    Please see \"mod-4-ipa-1-sample-data.py\" for sample data. The route map will\n",
    "    adhere to the same pattern. The route map may contain more legs and more stops,\n",
    "    but it will always be one-way and fully enclosed.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    first_stop: str\n",
    "        the stop that the shuttle will leave\n",
    "    second_stop: str\n",
    "        the stop that the shuttle will arrive at\n",
    "    route_map: dict\n",
    "        the data describing the routes\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    int\n",
    "        the time it will take the shuttle to travel from first_stop to second_stop\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    if first_stop==second_stop:\n",
    "        return 0\n",
    "    \n",
    "    current_stop = first_stop\n",
    "    time = 0\n",
    "\n",
    "    while True:\n",
    "        next_stop = None\n",
    "        for leg, details in route_map.items():\n",
    "            if leg[0] == current_stop:\n",
    "                next_stop = leg[1]\n",
    "                time += details[\"travel_time_mins\"]\n",
    "                break\n",
    "\n",
    "        if next_stop is None:\n",
    "            return -1 \n",
    "\n",
    "        if next_stop == second_stop:\n",
    "            return time \n",
    "\n",
    "        current_stop = next_stop"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
